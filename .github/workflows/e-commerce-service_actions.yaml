name: Service CI/CD Pipeline

on:
  push:
    branches: [22-msa-infra-모듈-cicd-적용-및-cicd-개선]
    paths:
      - 'service/**'
      - 'common/**'
  pull_request:
    branches: [22-msa-infra-모듈-cicd-적용-및-cicd-개선]
    paths:
      - 'service/**'
      - 'common/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: public.ecr.aws/o3q0p5x7
  ECS_CLUSTER: e-commerce

jobs:
  # ✅ 1단계: 서비스 자동 발견 + 변경 감지
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.generate.outputs.changed-services }}
      common-changed: ${{ steps.filter.outputs.common }}
      order: ${{ steps.filter.outputs.order }}
      product: ${{ steps.filter.outputs.product }}
      review: ${{ steps.filter.outputs.review }}
      search: ${{ steps.filter.outputs.search }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 🎯 변경사항 감지
      - name: Detect changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            common:
              - 'common/**'
              - 'build.gradle.kts'
              - 'settings.gradle.kts'
            order:
              - 'service/order/**'
            product:
              - 'service/product/**'
            review:
              - 'service/review/**'
            search:
              - 'service/search/**'

      # 📊 변경된 서비스 목록 생성 (안전한 방식)
      - name: Generate changed services list
        id: generate
        run: |
          echo "🔍 변경사항 분석 중..."
          services=""
          
          common_changed='${{ steps.filter.outputs.common }}'
          echo "📋 공통 모듈 변경: $common_changed"
          
          # ✅ 단순한 문자열 방식
          if [[ "$common_changed" == "true" || "${{ steps.filter.outputs.order }}" == "true" ]]; then
            services="$services order"
            echo "✅ order 배포 대상"
          fi
          
          if [[ "$common_changed" == "true" || "${{ steps.filter.outputs.product }}" == "true" ]]; then
            services="$services product"
            echo "✅ product 배포 대상"
          fi
          
          if [[ "$common_changed" == "true" || "${{ steps.filter.outputs.review }}" == "true" ]]; then
            services="$services review"
            echo "✅ review 배포 대상"
          fi
          
          if [[ "$common_changed" == "true" || "${{ steps.filter.outputs.search }}" == "true" ]]; then
            services="$services search"
            echo "✅ search 배포 대상"
          fi
          
          # 공백 제거 후 JSON 배열로 변환
          services=$(echo $services | xargs)
          if [[ -n "$services" ]]; then
            changed_services="[\"$(echo $services | sed 's/ /","/g')\"]"
          else
            changed_services="[]"
          fi
          
          echo "changed-services=$changed_services" >> $GITHUB_OUTPUT
          echo "🎯 최종 배포 대상: $changed_services"        


  # ✅ 2단계: 변경된 서비스만 빌드 & 테스트
  build-and-test:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-services != '[]'
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build and test service
        run: |
          echo "🔨 Building ${{ matrix.service }} service..."
          chmod +x ./gradlew
          ./gradlew :service:${{ matrix.service }}:build :service:${{ matrix.service }}:test

      - name: Build Docker image
        run: |
          echo "🐳 Building Docker image for ${{ matrix.service }}..."
          docker build -t $ECR_REGISTRY/${{ matrix.service }}:${{ github.sha }} -f service/${{ matrix.service }}/Dockerfile .
          docker tag $ECR_REGISTRY/${{ matrix.service }}:${{ github.sha }} $ECR_REGISTRY/${{ matrix.service }}:latest

  # ✅ 3단계: 배포 (변경된 서비스만)
  deploy-services:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/22-msa-infra-모듈-cicd-적용-및-cicd-개선' &&
      needs.build-and-test.result == 'success' &&
      needs.discover-and-detect.outputs.changed-services != '[]'
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 🔧 재사용 가능한 배포 액션 호출
      - name: Deploy service
        uses: ./.github/actions/aws-deploy
        with:
          service-name: ${{ matrix.service }}
          service-path: service/${{ matrix.service }}
          ecr-registry: ${{ env.ECR_REGISTRY }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ecs-cluster: ${{ env.ECS_CLUSTER }}
          gradle-task: :service:${{ matrix.service }}:build
          cleanup-old-images: 'true'
