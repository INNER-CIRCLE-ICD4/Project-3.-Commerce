name: Service CI/CD Pipeline

on:
  push:
    branches: [22-msa-infra-모듈-cicd-적용-및-cicd-개선]
    paths:
      - 'service/**'
      - 'common/**'
  pull_request:
    branches: [22-msa-infra-모듈-cicd-적용-및-cicd-개선]
    paths:
      - 'service/**'
      - 'common/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: public.ecr.aws/o3q0p5x7
  ECS_CLUSTER: e-commerce

jobs:
  # ✅ 1단계: 서비스 자동 발견 + 변경 감지
  discover-and-detect:
    runs-on: ubuntu-latest
    outputs:
      services-matrix: ${{ steps.generate-matrix.outputs.services-matrix }}
      changed-services: ${{ steps.detect-changes.outputs.changed-services }}
      common-changed: ${{ steps.detect-changes.outputs.common-changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 🔍 서비스 자동 발견
      - name: Discover services
        id: discover
        run: |
          echo "🔍 서비스 디렉터리 스캔 중..."
          
          # service/ 디렉터리에서 Dockerfile이 있는 서비스만 감지
          services=$(find service -maxdepth 1 -type d -exec test -f {}/Dockerfile \; -print | \
                    sed 's|service/||' | \
                    grep -v '^$' | \
                    sort | \
                    jq -R -s -c 'split("\n")[:-1]')
          
          echo "services=$services" >> $GITHUB_OUTPUT
          echo "📋 발견된 서비스: $services"
          
          # paths-filter를 위한 동적 필터 생성
          filter_config="common:\n  - 'common/**'\n  - 'build.gradle.kts'\n  - 'settings.gradle.kts'\n"
          
          for service in $(echo $services | jq -r '.[]'); do
            filter_config="${filter_config}${service}:\n  - 'service/${service}/**'\n"
          done
          
          echo -e "$filter_config" > filters.yml
          echo "🔧 동적 필터 생성 완료:"
          cat filters.yml

      # 🎯 변경사항 감지 (동적 필터 사용)
      - name: Detect changes
        id: detect-changes
        uses: dorny/paths-filter@v3
        with:
          filters: filters.yml
          list-files: shell

      # 📊 변경된 서비스 매트릭스 생성
      - name: Generate services matrix
        id: generate-matrix
        run: |
          services='${{ steps.discover.outputs.services }}'
          common_changed='${{ steps.detect-changes.outputs.common }}'
          changed_services='[]'
          
          echo "🔍 변경사항 분석 중..."
          echo "📋 전체 서비스: $services"
          echo "📋 공통 모듈 변경: $common_changed"
          
          # 각 서비스별 변경사항 확인
          for service in $(echo $services | jq -r '.[]'); do
            service_changed=$(echo '${{ steps.detect-changes.outputs }}' | jq -r ".${service}")
            echo "📋 $service 변경: $service_changed"
          
            # 공통 모듈 변경되었거나 해당 서비스가 변경된 경우
            if [[ "$common_changed" == "true" || "$service_changed" == "true" ]]; then
              changed_services=$(echo $changed_services | jq ". + [\"$service\"]")
              echo "✅ $service 배포 대상에 추가"
            else
              echo "⏭️ $service 변경사항 없음"
            fi
          done
          
          echo "services-matrix=$changed_services" >> $GITHUB_OUTPUT
          echo "changed-services=$changed_services" >> $GITHUB_OUTPUT
          echo "common-changed=$common_changed" >> $GITHUB_OUTPUT
          echo "🎯 최종 배포 대상: $changed_services"          


  # ✅ 2단계: 변경된 서비스만 빌드 & 테스트
  build-and-test:
    runs-on: ubuntu-latest
    needs: discover-and-detect
    if: needs.discover-and-detect.outputs.changed-services != '[]'
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.discover-and-detect.outputs.changed-services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build and test service
        run: |
          echo "🔨 Building ${{ matrix.service }} service..."
          chmod +x ./gradlew
          ./gradlew :service:${{ matrix.service }}:build :service:${{ matrix.service }}:test

      - name: Build Docker image
        run: |
          echo "🐳 Building Docker image for ${{ matrix.service }}..."
          docker build -t $ECR_REGISTRY/${{ matrix.service }}:${{ github.sha }} -f service/${{ matrix.service }}/Dockerfile .
          docker tag $ECR_REGISTRY/${{ matrix.service }}:${{ github.sha }} $ECR_REGISTRY/${{ matrix.service }}:latest

  # ✅ 3단계: 배포 (변경된 서비스만)
  deploy-services:
    runs-on: ubuntu-latest
    needs: [discover-and-detect, build-and-test]
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      needs.build-and-test.result == 'success' &&
      needs.discover-and-detect.outputs.changed-services != '[]'
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.discover-and-detect.outputs.changed-services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 🔧 재사용 가능한 배포 액션 호출
      - name: Deploy service
        uses: ./.github/actions/aws-deploy
        with:
          service-name: ${{ matrix.service }}
          service-path: service/${{ matrix.service }}
          ecr-registry: ${{ env.ECR_REGISTRY }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ecs-cluster: ${{ env.ECS_CLUSTER }}
          gradle-task: :service:${{ matrix.service }}:build
          cleanup-old-images: 'true'
