name: Multi-Module CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# AWS 설정 정보
env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: public.ecr.aws/o3q0p5x7

# 1단계: 변경된 파일 감지
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}
      common-changed: ${{ steps.filter.outputs.common }}
      order: ${{ steps.filter.outputs.order }}
      product: ${{ steps.filter.outputs.product }}
      review: ${{ steps.filter.outputs.review }}
      search: ${{ steps.filter.outputs.search }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            common:
              - 'common/**'
            order:
              - 'service/order/**'
            product:
              - 'service/product/**'
            review:
              - 'service/review/**'
            search:
              - 'service/search/**'

  # 2단계: 변경된 서비스 매트릭스 생성
  prepare-matrix:
    runs-on: ubuntu-latest
    needs: detect-changes
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-changes: ${{ steps.set-matrix.outputs.has-changes }}
    steps:
      - name: Set matrix for changed services
        id: set-matrix
        env:
          COMMON_CHANGED: ${{ needs.detect-changes.outputs.common-changed }}
          ORDER_CHANGED: ${{ needs.detect-changes.outputs.order }}
          PRODUCT_CHANGED: ${{ needs.detect-changes.outputs.product }}
          REVIEW_CHANGED: ${{ needs.detect-changes.outputs.review }}
          SEARCH_CHANGED: ${{ needs.detect-changes.outputs.search }}
        run: |
          services=()
          
          if [ "$COMMON_CHANGED" = "true" ]; then
            services=("order" "product" "review" "search")
            echo "🔄 Common 모듈 변경됨 - 모든 서비스 빌드"
          else
            # 개별 서비스 변경 확인
            [ "$ORDER_CHANGED" = "true" ] && services+=("order")
            [ "$PRODUCT_CHANGED" = "true" ] && services+=("product")
            [ "$REVIEW_CHANGED" = "true" ] && services+=("review")
            [ "$SEARCH_CHANGED" = "true" ] && services+=("search")
          fi
          
          # JSON 배열로 변환
          if [ ${#services[@]} -eq 0 ]; then
            matrix_json='{"service":[]}'
            has_changes="false"
            echo "⚠️ 변경된 서비스가 없습니다"
          else
            matrix_json=$(printf '%s\n' "${services[@]}" | jq -R . | jq -s -c '{service: .}')
            has_changes="true"
            echo "🚀 변경된 서비스: ${services[*]}"
          fi
          
          echo "matrix=${matrix_json}" >> $GITHUB_OUTPUT
          echo "has-changes=${has_changes}" >> $GITHUB_OUTPUT
          echo "📋 Matrix JSON: ${matrix_json}"

  # 3단계: 서비스별 병렬 빌드 (변경된 서비스만)
  build-services:
    runs-on: ubuntu-latest
    needs: prepare-matrix
    if: needs.prepare-matrix.outputs.has-changes == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build and test service
        run: |
          echo "🔨 Building ${{ matrix.service }} service..."
          chmod +x ./gradlew
          ./gradlew :service:${{ matrix.service }}:build :service:${{ matrix.service }}:test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Create ECR Repository if not exists
        run: |
          aws ecr-public describe-repositories --repository-names ${{ matrix.service }} --region ${{ env.AWS_REGION }} || \
          aws ecr-public create-repository --repository-name ${{ matrix.service }} --region ${{ env.AWS_REGION }}

      - name: Build Docker image
        run: | 
          echo "🐳 Building Docker image for ${{ matrix.service }}..."
          docker build -t $ECR_REGISTRY/${{ matrix.service }}:${{ github.sha }} -f service/${{ matrix.service }}/Dockerfile .
          docker tag $ECR_REGISTRY/${{ matrix.service }}:${{ github.sha }} $ECR_REGISTRY/${{ matrix.service }}:latest

      - name: Push to ECR Public
        run: | 
          echo "🚀 Pushing images for ${{ matrix.service }}..."
          docker push $ECR_REGISTRY/${{ matrix.service }}:${{ github.sha }}
          docker push $ECR_REGISTRY/${{ matrix.service }}:latest
          echo "✅ ${{ matrix.service }} 이미지 푸시 완료!"

  # 4단계: 빌드 결과 요약
  build-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, prepare-matrix, build-services]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## 🚀 Multi-Module CI Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | Changed |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Order | ${{ needs.detect-changes.outputs.order == 'true' && 'built' || 'skipped' }} | ${{ needs.detect-changes.outputs.order }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Product | ${{ needs.detect-changes.outputs.product == 'true' && 'built' || 'skipped' }} | ${{ needs.detect-changes.outputs.product }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Review | ${{ needs.detect-changes.outputs.review == 'true' && 'built' || 'skipped' }} | ${{ needs.detect-changes.outputs.review }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Search | ${{ needs.detect-changes.outputs.search == 'true' && 'built' || 'skipped' }} | ${{ needs.detect-changes.outputs.search }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Common Changed**: ${{ needs.detect-changes.outputs.common-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Built Services**: ${{ needs.prepare-matrix.outputs.matrix }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Has Changes**: ${{ needs.prepare-matrix.outputs.has-changes }}" >> $GITHUB_STEP_SUMMARY