name: Infrastructure CI/CD Pipeline

on:
  push:
    branches: [22-msa-infra-Î™®Îìà-cicd-Ï†ÅÏö©-Î∞è-cicd-Í∞úÏÑ†]
    paths:
      - 'infra/**'
      - 'common/**'
  pull_request:
    branches: [22-msa-infra-Î™®Îìà-cicd-Ï†ÅÏö©-Î∞è-cicd-Í∞úÏÑ†]
    paths:
      - 'infra/**'
      - 'common/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: public.ecr.aws/o3q0p5x7
  ECS_CLUSTER: e-commerce  # infra Ï†ÑÏö© ÌÅ¥Îü¨Ïä§ÌÑ∞


jobs:
  detect-infra-changes:
    runs-on: ubuntu-latest
    outputs:
      common-changed: ${{ steps.filter.outputs.common }}
      config-server: ${{ steps.filter.outputs.config-server }}
      eureka-server: ${{ steps.filter.outputs.eureka-server }}
      gateway: ${{ steps.filter.outputs.gateway }}
      any-infra-changed: ${{ steps.check.outputs.any-changed }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: | 
            common: 
              - 'common/**'
              - 'build.gradle.kts'
              - 'settings.gradle.kts'
            config-server: 
              - 'infra/config-server/**'
            eureka-server:
              - 'infra/eureka-server/**'
            gateway: 
              - 'infra/gateway/**'
      - name: Check if any infra changed
        id: check
        run: |
          if [[ "${{ steps.filter.outputs.common }}" == "true" || \
                "${{ steps.filter.outputs.config-server }}" == "true" || \
                "${{ steps.filter.outputs.eureka-server }}" == "true" || \
                "${{ steps.filter.outputs.gateway }}" == "true" ]]; then
            echo "any-changed=true" >> $GITHUB_OUTPUT
          else
            echo "any-changed=false" >> $GITHUB_OUTPUT
          fi

  cleanup-ecr-images:
    runs-on: ubuntu-latest
    needs: detect-infra-changes
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/22-msa-infra-Î™®Îìà-cicd-Ï†ÅÏö©-Î∞è-cicd-Í∞úÏÑ†' && 
      needs.detect-infra-changes.outputs.any-infra-changed == 'true'
    strategy:
      matrix:
        service: [config-server, eureka-server, gateway]
    steps:
      - name: Configure AWS credentials (ECR)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Cleanup old Images
        run: |
          echo "üóëÔ∏è Cleaning up old images for ${{ matrix.service }}..."
          
          image_digests=$(aws ecr-public describe-images \
            --repository-name "infra/${{ matrix.service }}" \
            --query 'imageDetails[].imageDigest' \ 
            --output text \ 
            --region ${{ env.AWS_REGION }} 2>/dev/null || echo "")
          
          if [ ! -z "$image_digests" ] && [ "$image_digests" != "" ]; then
            image_count=$(echo $image_digests | wc -w)
            echo "üîç Found $image_count existing images to delete"
          
            for digest in $image_digests; do 
              if [ ! -z "$digest" ] && [ "$digest" != "None" ]; then
                echo "üóëÔ∏è Deleting image digest: $digest"
                aws ecr-public batch-delete-image \ 
                  --repository-name "infra/${{ matrix.service }}" \
                  --image-ids imageDigest=$digest \
                  --region ${{ env.AWS_REGION }} || echo "Failed to delete $digest"
              fi
            done
          
            echo "‚úÖ Successfully deleted all $image_count existing images from infra/${{ matrix.service }}"
          else
            echo "‚ÑπÔ∏è No existing images found in infra/${{ matrix.service }} repository"
          fi
          
          
         # Ïò§ÎûòÎêú Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú (
          

      

  build-infra:
    runs-on: ubuntu-latest
    needs: detect-infra-changes
    if: needs.detect-infra-changes.outputs.any-infra-changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: config-server
            priority: 1
          - service: eureka-server
            priority: 2
          - service: gateway
            priority: 3
    steps:
      - name: Skip if no changes
        if: |
          (matrix.service == 'config-server' && needs.detect-infra-changes.outputs.common-changed != 'true' && needs.detect-infra-changes.outputs.config-server != 'true') ||
          (matrix.service == 'eureka-server' && needs.detect-infra-changes.outputs.common-changed != 'true' && needs.detect-infra-changes.outputs.eureka-server != 'true') ||
          (matrix.service == 'gateway' && needs.detect-infra-changes.outputs.common-changed != 'true' && needs.detect-infra-changes.outputs.gateway != 'true')
        run: |
          echo "No changes detected for ${{ matrix.service }}, skipping..."
          exit 0

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: | 
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-infra-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: | 
            ${{ runner.os }}-gradle-infra-

      - name: Build and test infra service
        run: |
          echo "üî® Building ${{ matrix.service }}..."
          chmod +x ./gradlew
          ./gradlew :infra:${{ matrix.service }}:build :infra:${{ matrix.service }}:test

      - name: Build Docker Test
        run: |
          echo "üê≥ Building Docker image for ${{ matrix.service }}..."
          docker build -t $ECR_REGISTRY/infra/${{ matrix.service }}:${{ github.sha }} -f infra/${{ matrix.service }}/Dockerfile .
          docker tag $ECR_REGISTRY/infra/${{ matrix.service }}:${{ github.sha }} $ECR_REGISTRY/infra/${{ matrix.service }}:latest

  deploy-infra:
    runs-on: ubuntu-latest
    needs: [detect-infra-changes, build-infra]
    if: | 
      github.event_name == 'push' &&
      github.ref == 'refs/heads/22-msa-infra-Î™®Îìà-cicd-Ï†ÅÏö©-Î∞è-cicd-Í∞úÏÑ†'  &&
      needs.build-infra.result == 'success' &&
      needs.detect-infra-changes.outputs.any-infra-changed == 'true'
    strategy:
      matrix:
        include:
          - service: config-server
            priority: 1
            port: 8888
          - service: eureka-server
            priority: 2
            port: 8761
          - service: gateway
            priority: 3
            port: 8000
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Skip if no changes
        if: |
          (matrix.service == 'config-server' && needs.detect-infra-changes.outputs.common-changed != 'true' && needs.detect-infra-changes.outputs.config-server != 'true') || 
          (matrix.service == 'eureka-server' && needs.detect-infra-changes.outputs.common-changed != 'true' && needs.detect-infra-changes.outputs.eureka-server != 'true') ||
          (matrix.service == 'gateway' && needs.detect-infra-changes.outputs.gateway != 'true' &&  needs.detect-infra-changes.outputs.gateway != 'true')
        run: |
          echo "No changes detected for ${{ matrix.service }}, skipping deployment..."
          exit 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Rebuild and Push Docker image
        run: |
          echo "üîÑ Rebuilding ${{ matrix.service }}..."
          chmod +x ./gradlew
          ./gradlew :infra:${{ matrix.service }}:build
          
          docker build -t $ECR_REGISTRY/infra/${{ matrix.service }}:${{ github.sha }} -f infra/${{ matrix.service }}/Dockerfile .
          docker tag $ECR_REGISTRY/infra/${{ matrix.service }}:${{ github.sha }} $ECR_REGISTRY/infra/${{ matrix.service }}:latest

      - name: Configure AWS credentials (ECR)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Push to ECR
        run: |
          echo "üöÄ Pushing ${{ matrix.service }} to ECR..."
          docker push $ECR_REGISTRY/infra/${{ matrix.service }}:${{ github.sha }}
          docker push $ECR_REGISTRY/infra/${{ matrix.service }}:latest
