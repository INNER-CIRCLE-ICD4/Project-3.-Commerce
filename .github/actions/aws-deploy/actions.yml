# .github/actions/aws-deploy/action.yml
name: 'AWS ECR & ECS Deploy'
description: 'Reusable AWS deployment action for microservices'

inputs:
  service-name:
    description: 'Service name'
    required: true
  service-path:
    description: 'Service path (e.g., service/order, infra/config-server)'
    required: true
  ecr-registry:
    description: 'ECR registry URL'
    required: true
  aws-region:
    description: 'AWS region'
    required: true
  aws-access-key:
    description: 'AWS access key'
    required: true
  aws-secret-key:
    description: 'AWS secret key'
    required: true
  ecs-cluster:
    description: 'ECS cluster name'
    required: true
    default: 'e-commerce'
  cleanup-old-images:
    description: 'Whether to cleanup old ECR images'
    required: false
    default: 'true'
  gradle-task:
    description: 'Gradle build task'
    required: false
    default: 'build'

runs:
  using: 'composite'
  steps:
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key }}
        aws-secret-access-key: ${{ inputs.aws-secret-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR Public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    # 🗑️ 기존 이미지 정리 (옵션)
    - name: Cleanup old ECR images
      if: inputs.cleanup-old-images == 'true'
      shell: bash
      run: |
        echo "🗑️ Cleaning up old images for ${{ inputs.service-name }}..."
        
        # ECR 레포지토리 이름 설정
        if [[ "${{ inputs.service-path }}" == infra/* ]]; then
          repo_name="infra/${{ inputs.service-name }}"
        else
          repo_name="${{ inputs.service-name }}"
        fi
        
        echo "📋 Repository: $repo_name"
        
        image_digests=$(aws ecr-public describe-images --repository-name "$repo_name" --query 'imageDetails[].imageDigest' --output text --region ${{ inputs.aws-region }} 2>/dev/null || echo "")
        
        if [ ! -z "$image_digests" ] && [ "$image_digests" != "" ]; then
          image_count=$(echo $image_digests | wc -w)
          echo "🔍 Found $image_count existing images to delete"
        
          for digest in $image_digests; do 
            if [ ! -z "$digest" ] && [ "$digest" != "None" ]; then
              echo "🗑️ Deleting image: $digest"
              aws ecr-public batch-delete-image --repository-name "$repo_name" --image-ids imageDigest=$digest --region ${{ inputs.aws-region }} || echo "⚠️ Failed to delete $digest"
            fi
          done
        
          echo "✅ Successfully deleted all $image_count existing images"
        else
          echo "ℹ️ No existing images found in $repo_name"
        fi

    # 🔨 Gradle 빌드
    - name: Build with Gradle
      shell: bash
      run: |
        echo "🔨 Building ${{ inputs.service-name }} with Gradle..."
        chmod +x ./gradlew
        ./gradlew ${{ inputs.gradle-task }}

    # 🐳 Docker 빌드 & 태깅
    - name: Build and tag Docker image
      shell: bash
      run: |
        echo "🐳 Building Docker image for ${{ inputs.service-name }}..."
        
        # ECR 레포지토리 이름과 이미지 태그 설정
        if [[ "${{ inputs.service-path }}" == infra/* ]]; then
          image_name="${{ inputs.ecr-registry }}/infra/${{ inputs.service-name }}"
        else
          image_name="${{ inputs.ecr-registry }}/${{ inputs.service-name }}"
        fi
        
        echo "📋 Image name: $image_name"
        
        # Docker 빌드
        docker build -t $image_name:${{ github.sha }} -f ${{ inputs.service-path }}/Dockerfile .
        docker tag $image_name:${{ github.sha }} $image_name:latest
        
        echo "✅ Docker image built and tagged"

#    # 📦 ECR 레포지토리 생성 (필요시)
#    - name: Create ECR repository if not exists
#      shell: bash
#      run: |
#        if [[ "${{ inputs.service-path }}" == infra/* ]]; then
#          repo_name="infra/${{ inputs.service-name }}"
#        else
#          repo_name="${{ inputs.service-name }}"
#        fi
#
#        echo "🔍 Checking if repository $repo_name exists..."
#        aws ecr-public describe-repositories --repository-names "$repo_name" --region ${{ inputs.aws-region }} || \
#        aws ecr-public create-repository --repository-name "$repo_name" --region ${{ inputs.aws-region }}

    # 🚀 ECR에 이미지 푸시
    - name: Push to ECR
      shell: bash
      run: |
        if [[ "${{ inputs.service-path }}" == infra/* ]]; then
          image_name="${{ inputs.ecr-registry }}/infra/${{ inputs.service-name }}"
        else
          image_name="${{ inputs.ecr-registry }}/${{ inputs.service-name }}"
        fi
        
        echo "🚀 Pushing images to ECR..."
        docker push $image_name:${{ github.sha }}
        docker push $image_name:latest
        echo "✅ Images pushed successfully!"

    # 🎯 ECS 배포 (Seoul 리전)
    - name: Deploy to ECS
      shell: bash
      run: |
        echo "🎯 Deploying ${{ inputs.service-name }} to ECS..."
        
        # Seoul 리전으로 변경
        aws configure set region ap-northeast-2
        
        # 이미지 이름 설정
        if [[ "${{ inputs.service-path }}" == infra/* ]]; then
          image_name="${{ inputs.ecr-registry }}/infra/${{ inputs.service-name }}"
        else
          image_name="${{ inputs.ecr-registry }}/${{ inputs.service-name }}"
        fi
        
        # Task Definition 업데이트
        aws ecs describe-task-definition \
          --task-definition ${{ inputs.service-name }} \
          --query 'taskDefinition' \
          --output json > temp-${{ inputs.service-name }}.json
        
        jq --arg image "$image_name:latest" '
          del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) |
          .containerDefinitions[0].image = $image
        ' temp-${{ inputs.service-name }}.json > clean-${{ inputs.service-name }}.json
        
        aws ecs register-task-definition \
          --cli-input-json file://clean-${{ inputs.service-name }}.json
        
        # 서비스 업데이트
        if aws ecs describe-services \
           --cluster ${{ inputs.ecs-cluster }} \
           --services ${{ inputs.service-name }}-service \
           --query 'services[0].status' \
           --output text 2>/dev/null | grep -q "ACTIVE"; then
        
          echo "✅ 서비스 존재 - 업데이트 진행"
          aws ecs update-service \
            --cluster ${{ inputs.ecs-cluster }} \
            --service ${{ inputs.service-name }}-service \
            --task-definition ${{ inputs.service-name }} \
            --force-new-deployment
          echo "🎉 ${{ inputs.service-name }} 서비스 업데이트 완료!"
        else
          echo "⚠️ 서비스 ${{ inputs.service-name }}-service가 존재하지 않습니다."
          echo "📋 Task Definition '${{ inputs.service-name }}'이 생성되었습니다."
        fi
        
        # 임시 파일 정리
        rm -f temp-${{ inputs.service-name }}.json clean-${{ inputs.service-name }}.json
        
        echo "🎉 ${{ inputs.service-name }} 배포 완료!"